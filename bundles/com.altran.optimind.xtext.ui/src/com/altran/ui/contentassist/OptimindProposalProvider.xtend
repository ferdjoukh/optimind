/*
 * generated by Xtext 2.15.0
 */
package com.altran.ui.contentassist

import java.io.File
import java.nio.file.Files
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.core.runtime.Platform
import org.osgi.framework.Bundle

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class OptimindProposalProvider extends AbstractOptimindProposalProvider {
	
	var Bundle bundle = Platform.getBundle("com.altran.optimind.xtext.ui");
	
	
	override complete_Type(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	   
	    if (bundle !== null){	    
		    var String bundlePath = bundle.location;
			val String typesFilePath = bundlePath.split("file:").get(1) + "templates/types.txt"; 
		    
		    acceptor.accept(createCompletionProposal("int", "Integer",null, context));
		    var File typesFile = new File(typesFilePath);
			var lines = Files.lines(typesFile.toPath);
			lines.forEach[line |
				acceptor.accept(createCompletionProposal(line.split(" ").get(0), line.split(" ").get(1), null, context));
			]			
		}else{
			acceptor.accept(createCompletionProposal("int", "integer", null, context));
			acceptor.accept(createCompletionProposal("str", "String", null, context));	
		}	
	}		
}
