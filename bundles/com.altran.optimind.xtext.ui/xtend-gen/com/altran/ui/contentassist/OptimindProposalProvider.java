/**
 * generated by Xtext 2.15.0
 */
package com.altran.ui.contentassist;

import com.altran.ui.contentassist.AbstractOptimindProposalProvider;
import java.io.File;
import java.nio.file.Files;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.osgi.framework.Bundle;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class OptimindProposalProvider extends AbstractOptimindProposalProvider {
  private Bundle bundle = Platform.getBundle("com.altran.optimind.xtext.ui");
  
  @Override
  public void complete_Type(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    try {
      if ((this.bundle != null)) {
        String bundlePath = this.bundle.getLocation();
        String _get = bundlePath.split("file:")[1];
        final String typesFilePath = (_get + "templates/types.txt");
        acceptor.accept(this.createCompletionProposal("int", "Integer", null, context));
        File typesFile = new File(typesFilePath);
        Stream<String> lines = Files.lines(typesFile.toPath());
        final Consumer<String> _function = (String line) -> {
          acceptor.accept(this.createCompletionProposal(line.split(" ")[0], line.split(" ")[1], null, context));
        };
        lines.forEach(_function);
      } else {
        acceptor.accept(this.createCompletionProposal("int", "integer", null, context));
        acceptor.accept(this.createCompletionProposal("str", "String", null, context));
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
