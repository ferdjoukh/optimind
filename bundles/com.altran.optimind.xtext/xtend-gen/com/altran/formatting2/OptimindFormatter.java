/**
 * generated by Xtext 2.15.0
 */
package com.altran.formatting2;

import com.altran.optimind.model.workflow.AbstractTask;
import com.altran.optimind.model.workflow.BaseTask;
import com.altran.optimind.model.workflow.TaskInput;
import com.altran.optimind.model.workflow.TaskOutput;
import com.altran.optimind.model.workflow.Workflow;
import com.altran.services.OptimindGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class OptimindFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private OptimindGrammarAccess _optimindGrammarAccess;
  
  protected void _format(final Workflow workflow, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final BaseTask baseTask, @Extension final IFormattableDocument document) {
    EList<TaskInput> _inputs = baseTask.getInputs();
    for (final TaskInput taskInput : _inputs) {
      document.<TaskInput>format(taskInput);
    }
    EList<TaskOutput> _outputs = baseTask.getOutputs();
    for (final TaskOutput taskOutput : _outputs) {
      document.<TaskOutput>format(taskOutput);
    }
    EList<AbstractTask> _children = baseTask.getChildren();
    for (final AbstractTask abstractTask : _children) {
      document.<AbstractTask>format(abstractTask);
    }
  }
  
  public void format(final Object baseTask, final IFormattableDocument document) {
    if (baseTask instanceof BaseTask) {
      _format((BaseTask)baseTask, document);
      return;
    } else if (baseTask instanceof XtextResource) {
      _format((XtextResource)baseTask, document);
      return;
    } else if (baseTask instanceof Workflow) {
      _format((Workflow)baseTask, document);
      return;
    } else if (baseTask instanceof EObject) {
      _format((EObject)baseTask, document);
      return;
    } else if (baseTask == null) {
      _format((Void)null, document);
      return;
    } else if (baseTask != null) {
      _format(baseTask, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(baseTask, document).toString());
    }
  }
}
