/*
 * generated by Xtext 2.15.0
 */
package com.altran.generator

import com.altran.Utils.Utils
import com.altran.graphs.DotGraphGenerator
import com.altran.optimind.model.workflow.Workflow
import com.altran.optimind.model.workflow.Language
import java.io.File
import org.eclipse.core.resources.IFile
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class OptimindGenerator extends AbstractGenerator {

	var Workflow m_workflow ; 
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		var Workflow workflow = getWorkflowFromResource(resource)
		m_workflow = workflow;
		var String resourcePath = getResourceFilePath(resource)
		new DotGraphGenerator(resourcePath, workflow).createDotFile()
		var String filePath =createFilePath(resourcePath, workflow.language)
		
		if(workflow.language == Language.PYTHON)
		{
			new PythonCodeGenerator(workflow,filePath).generate()	
		}	
		else
			new JavaCodeGenerator(workflow,filePath).generate()			
					
		var String scriptsPackagePath = createPackagePath(resourcePath)
		
		new LibraryFunctionGenerator(workflow,scriptsPackagePath, workflow.language).generate()	
		new CustomTaskRunnerGenerator(workflow, scriptsPackagePath, workflow.language).generate()
		
	}
	
	def String createPackagePath(String workflowFilePath) {
		var String name
		
		if (workflowFilePath.contains("\\")) {
			var int last1 = workflowFilePath.lastIndexOf("\\");
			var name1 = workflowFilePath.substring(0, last1);
			var int last = name1.lastIndexOf("\\");
			name = name1.substring(0, last);
		}else {
			name = workflowFilePath;
		}
		
		name + "\\scripts\\";
	}
	
	def String getResourceFilePath(Resource resource){
		var IFile ifile = Utils.getFile(resource);
		var File file = ifile.location.toFile
		file.path
	}
	
	def String createFilePath(String workflowFilePath, Language language) {
		var String name
		
		if (workflowFilePath.contains("\\")) {
			var int last = workflowFilePath.lastIndexOf("\\");
			name = workflowFilePath.substring(0, last) + "\\" + m_workflow.name;
			
			
		}else {
			name = workflowFilePath;		
		}
		if(language == Language.PYTHON)
		{
			name + ".py";
		}	
		else
			name + ".java"; 
	}
	
	def Workflow getWorkflowFromResource(Resource resource){
		resource.contents.get(0) as Workflow
	}

		
}
