// automatically generated by Xtext
grammar com.altran.Optimind with org.eclipse.xtext.common.Terminals

import "http://www.altran.com/optimind/model.workflow"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Workflow returns Workflow:
	{Workflow}
	'Workflow'
	name=EString
	'{'
	('Language' language=ProgLanguage)? 
	(baseTask=BaseTask)?
	(functions+=LibraryFunction (functions+=LibraryFunction)*)?
	'}';

AbstractTask returns AbstractTask:
	BaseTask | LibraryTask | CustomTask;

TaskInput returns TaskInput:
	Setter | Connection;

EString returns ecore::EString:
	STRING | ID;
	
Type returns ecore::EString:
	STRING | ID
;	

TaskOutput returns TaskOutput:
	{TaskOutput}
	'Output'
	name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?;

enum ProgLanguage returns Language:
	Python='Python' | Java='Java';

enum TaskStatus returns TaskStatus:
	FINISHED='FINISHED' | PREPARED='PREPARED' | NOT_PREPARED='NOT_PREPARED' | PROCESSING='PROCESSING';

BaseTask returns BaseTask:
	{BaseTask}
	'BaseTask'
	name=EString
	'{'
	('status' status=TaskStatus)?
	('inputs' '{' inputs+=TaskInput ("," inputs+=TaskInput)* '}')?
	('outputs' '{' outputs+=TaskOutput ("," outputs+=TaskOutput)* '}')?
	(children+=AbstractTask (children+=AbstractTask)*)?
	'}';

LibraryTask returns LibraryTask:
	{LibraryTask}
	'LibraryTask'
	name=EString
	'{'
	('status' status=TaskStatus)?
	(inputs+=TaskInput (inputs+=TaskInput)*)?
	(outputs+=TaskOutput (outputs+=TaskOutput)*)?
	('Libraryfunction' libraryfunction=[LibraryFunction|EString])?
	'}';

CustomTask returns CustomTask:
	{CustomTask}
	'Task'
	name=EString
	'{'
	('status' status=TaskStatus)?
	(inputs+=TaskInput (inputs+=TaskInput)*)?
	(outputs+=TaskOutput (outputs+=TaskOutput)*)?
	('runner' runner=EString)?
	'}';

Setter returns Setter:
	{Setter}
	'Setter'
	name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?;

Connection returns Connection:
	{Connection}
	'Connection'
	name=EString ('to' taskoutput=[TaskOutput|EString])?;

LibraryFunction returns LibraryFunction:
	{LibraryFunction}
	'LibraryFunction'
	name=EString
	'{'
	'function' function=EString
	(inputs+=Input (inputs+=Input)*)?
	(outputs+=Output (outputs+=Output)*)?
	'}';

Input returns Input:
	{Input}
	'Input'
	name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?;

Output returns Output:
	{Output}
	'Output'
	name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?;