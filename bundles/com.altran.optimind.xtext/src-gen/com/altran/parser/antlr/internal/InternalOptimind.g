/*
 * generated by Xtext 2.16.0
 */
grammar InternalOptimind;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.altran.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.altran.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.altran.services.OptimindGrammarAccess;

}

@parser::members {

 	private OptimindGrammarAccess grammarAccess;

    public InternalOptimindParser(TokenStream input, OptimindGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Workflow";
   	}

   	@Override
   	protected OptimindGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleWorkflow
entryRuleWorkflow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkflowRule()); }
	iv_ruleWorkflow=ruleWorkflow
	{ $current=$iv_ruleWorkflow.current; }
	EOF;

// Rule Workflow
ruleWorkflow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWorkflowAccess().getWorkflowAction_0(),
					$current);
			}
		)
		otherlv_1='Workflow'
		{
			newLeafNode(otherlv_1, grammarAccess.getWorkflowAccess().getWorkflowKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getWorkflowAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='Language'
			{
				newLeafNode(otherlv_4, grammarAccess.getWorkflowAccess().getLanguageKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getWorkflowAccess().getLanguageProgLanguageEnumRuleCall_4_1_0());
					}
					lv_language_5_0=ruleProgLanguage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWorkflowRule());
						}
						set(
							$current,
							"language",
							lv_language_5_0,
							"com.altran.Optimind.ProgLanguage");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowAccess().getBaseTaskBaseTaskParserRuleCall_5_0());
				}
				lv_baseTask_6_0=ruleBaseTask
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowRule());
					}
					set(
						$current,
						"baseTask",
						lv_baseTask_6_0,
						"com.altran.Optimind.BaseTask");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getWorkflowAccess().getFunctionsLibraryFunctionParserRuleCall_6_0_0());
					}
					lv_functions_7_0=ruleLibraryFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWorkflowRule());
						}
						add(
							$current,
							"functions",
							lv_functions_7_0,
							"com.altran.Optimind.LibraryFunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getWorkflowAccess().getFunctionsLibraryFunctionParserRuleCall_6_1_0());
					}
					lv_functions_8_0=ruleLibraryFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWorkflowRule());
						}
						add(
							$current,
							"functions",
							lv_functions_8_0,
							"com.altran.Optimind.LibraryFunction");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getWorkflowAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleAbstractTask
entryRuleAbstractTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractTaskRule()); }
	iv_ruleAbstractTask=ruleAbstractTask
	{ $current=$iv_ruleAbstractTask.current; }
	EOF;

// Rule AbstractTask
ruleAbstractTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractTaskAccess().getBaseTaskParserRuleCall_0());
		}
		this_BaseTask_0=ruleBaseTask
		{
			$current = $this_BaseTask_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTaskAccess().getLibraryTaskParserRuleCall_1());
		}
		this_LibraryTask_1=ruleLibraryTask
		{
			$current = $this_LibraryTask_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTaskAccess().getCustomTaskParserRuleCall_2());
		}
		this_CustomTask_2=ruleCustomTask
		{
			$current = $this_CustomTask_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTaskInput
entryRuleTaskInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskInputRule()); }
	iv_ruleTaskInput=ruleTaskInput
	{ $current=$iv_ruleTaskInput.current; }
	EOF;

// Rule TaskInput
ruleTaskInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTaskInputAccess().getSetterParserRuleCall_0());
		}
		this_Setter_0=ruleSetter
		{
			$current = $this_Setter_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTaskInputAccess().getConnectionParserRuleCall_1());
		}
		this_Connection_1=ruleConnection
		{
			$current = $this_Connection_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getEIntAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getTypeAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getTypeAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleTaskOutput
entryRuleTaskOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskOutputRule()); }
	iv_ruleTaskOutput=ruleTaskOutput
	{ $current=$iv_ruleTaskOutput.current; }
	EOF;

// Rule TaskOutput
ruleTaskOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTaskOutputAccess().getTaskOutputAction_0(),
					$current);
			}
		)
		otherlv_1='Output'
		{
			newLeafNode(otherlv_1, grammarAccess.getTaskOutputAccess().getOutputKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskOutputAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskOutputRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='type'
			{
				newLeafNode(otherlv_3, grammarAccess.getTaskOutputAccess().getTypeKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTaskOutputAccess().getTypeAsStringTypeParserRuleCall_3_1_0());
					}
					lv_typeAsString_4_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTaskOutputRule());
						}
						set(
							$current,
							"typeAsString",
							lv_typeAsString_4_0,
							"com.altran.Optimind.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='value'
			{
				newLeafNode(otherlv_5, grammarAccess.getTaskOutputAccess().getValueKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTaskOutputAccess().getValueAsStringEStringParserRuleCall_4_1_0());
					}
					lv_valueAsString_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTaskOutputRule());
						}
						set(
							$current,
							"valueAsString",
							lv_valueAsString_6_0,
							"com.altran.Optimind.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAbstractStatement
entryRuleAbstractStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractStatementRule()); }
	iv_ruleAbstractStatement=ruleAbstractStatement
	{ $current=$iv_ruleAbstractStatement.current; }
	EOF;

// Rule AbstractStatement
ruleAbstractStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractStatementAccess().getForParserRuleCall_0());
		}
		this_For_0=ruleFor
		{
			$current = $this_For_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractStatementAccess().getWhileParserRuleCall_1());
		}
		this_While_1=ruleWhile
		{
			$current = $this_While_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractStatementAccess().getIfParserRuleCall_2());
		}
		this_If_2=ruleIf
		{
			$current = $this_If_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFor
entryRuleFor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForRule()); }
	iv_ruleFor=ruleFor
	{ $current=$iv_ruleFor.current; }
	EOF;

// Rule For
ruleFor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForAccess().getForStatementAction_0(),
					$current);
			}
		)
		otherlv_1='For'
		{
			newLeafNode(otherlv_1, grammarAccess.getForAccess().getForKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getForAccess().getLeftCurlyBracketKeyword_3());
		}
		otherlv_4='from'
		{
			newLeafNode(otherlv_4, grammarAccess.getForAccess().getFromKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAccess().getFromEIntParserRuleCall_5_0());
				}
				lv_from_5_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForRule());
					}
					set(
						$current,
						"from",
						lv_from_5_0,
						"com.altran.Optimind.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='to'
		{
			newLeafNode(otherlv_6, grammarAccess.getForAccess().getToKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAccess().getToEIntParserRuleCall_7_0());
				}
				lv_to_7_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForRule());
					}
					set(
						$current,
						"to",
						lv_to_7_0,
						"com.altran.Optimind.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='increment'
		{
			newLeafNode(otherlv_8, grammarAccess.getForAccess().getIncrementKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAccess().getIncrementEIntParserRuleCall_9_0());
				}
				lv_increment_9_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForRule());
					}
					set(
						$current,
						"increment",
						lv_increment_9_0,
						"com.altran.Optimind.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='do'
		{
			newLeafNode(otherlv_10, grammarAccess.getForAccess().getDoKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAccess().getAbstracttaskAbstractTaskParserRuleCall_11_0());
				}
				lv_abstracttask_11_0=ruleAbstractTask
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForRule());
					}
					set(
						$current,
						"abstracttask",
						lv_abstracttask_11_0,
						"com.altran.Optimind.AbstractTask");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getForAccess().getRightCurlyBracketKeyword_12());
		}
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current; }
	EOF;

// Rule While
ruleWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWhileAccess().getWhileStatementAction_0(),
					$current);
			}
		)
		otherlv_1='While'
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileAccess().getWhileKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getWhileAccess().getLeftCurlyBracketKeyword_3());
		}
		otherlv_4='condition'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileAccess().getConditionKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getConditionEStringParserRuleCall_5_0());
				}
				lv_condition_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"condition",
						lv_condition_5_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='do'
		{
			newLeafNode(otherlv_6, grammarAccess.getWhileAccess().getDoKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getAbstracttaskAbstractTaskParserRuleCall_7_0());
				}
				lv_abstracttask_7_0=ruleAbstractTask
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"abstracttask",
						lv_abstracttask_7_0,
						"com.altran.Optimind.AbstractTask");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getWhileAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfAccess().getIfStatementAction_0(),
					$current);
			}
		)
		otherlv_1='If'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfAccess().getIfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_3());
		}
		otherlv_4='condition'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfAccess().getConditionKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getConditionEStringParserRuleCall_5_0());
				}
				lv_condition_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"condition",
						lv_condition_5_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='then'
		{
			newLeafNode(otherlv_6, grammarAccess.getIfAccess().getThenKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getThenAbstractTaskParserRuleCall_7_0());
				}
				lv_then_7_0=ruleAbstractTask
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"then",
						lv_then_7_0,
						"com.altran.Optimind.AbstractTask");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_8='else'
			{
				newLeafNode(otherlv_8, grammarAccess.getIfAccess().getElseKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfAccess().getElseAbstractTaskParserRuleCall_8_1_0());
					}
					lv_else_9_0=ruleAbstractTask
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfRule());
						}
						set(
							$current,
							"else",
							lv_else_9_0,
							"com.altran.Optimind.AbstractTask");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getIfAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleBaseTask
entryRuleBaseTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBaseTaskRule()); }
	iv_ruleBaseTask=ruleBaseTask
	{ $current=$iv_ruleBaseTask.current; }
	EOF;

// Rule BaseTask
ruleBaseTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBaseTaskAccess().getBaseTaskAction_0(),
					$current);
			}
		)
		otherlv_1='BaseTask'
		{
			newLeafNode(otherlv_1, grammarAccess.getBaseTaskAccess().getBaseTaskKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBaseTaskAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBaseTaskRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getBaseTaskAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='status'
			{
				newLeafNode(otherlv_4, grammarAccess.getBaseTaskAccess().getStatusKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBaseTaskAccess().getStatusTaskStatusEnumRuleCall_4_1_0());
					}
					lv_status_5_0=ruleTaskStatus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBaseTaskRule());
						}
						set(
							$current,
							"status",
							lv_status_5_0,
							"com.altran.Optimind.TaskStatus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='inputs'
			{
				newLeafNode(otherlv_6, grammarAccess.getBaseTaskAccess().getInputsKeyword_5_0());
			}
			otherlv_7='{'
			{
				newLeafNode(otherlv_7, grammarAccess.getBaseTaskAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBaseTaskAccess().getInputsTaskInputParserRuleCall_5_2_0());
					}
					lv_inputs_8_0=ruleTaskInput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBaseTaskRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_8_0,
							"com.altran.Optimind.TaskInput");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getBaseTaskAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBaseTaskAccess().getInputsTaskInputParserRuleCall_5_3_1_0());
						}
						lv_inputs_10_0=ruleTaskInput
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBaseTaskRule());
							}
							add(
								$current,
								"inputs",
								lv_inputs_10_0,
								"com.altran.Optimind.TaskInput");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getBaseTaskAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
		(
			otherlv_12='outputs'
			{
				newLeafNode(otherlv_12, grammarAccess.getBaseTaskAccess().getOutputsKeyword_6_0());
			}
			otherlv_13='{'
			{
				newLeafNode(otherlv_13, grammarAccess.getBaseTaskAccess().getLeftCurlyBracketKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBaseTaskAccess().getOutputsTaskOutputParserRuleCall_6_2_0());
					}
					lv_outputs_14_0=ruleTaskOutput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBaseTaskRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_14_0,
							"com.altran.Optimind.TaskOutput");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_15=','
				{
					newLeafNode(otherlv_15, grammarAccess.getBaseTaskAccess().getCommaKeyword_6_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBaseTaskAccess().getOutputsTaskOutputParserRuleCall_6_3_1_0());
						}
						lv_outputs_16_0=ruleTaskOutput
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBaseTaskRule());
							}
							add(
								$current,
								"outputs",
								lv_outputs_16_0,
								"com.altran.Optimind.TaskOutput");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_17='}'
			{
				newLeafNode(otherlv_17, grammarAccess.getBaseTaskAccess().getRightCurlyBracketKeyword_6_4());
			}
		)?
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getBaseTaskAccess().getChildrenAbstractTaskParserRuleCall_7_0_0_0());
						}
						lv_children_18_1=ruleAbstractTask
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBaseTaskRule());
							}
							add(
								$current,
								"children",
								lv_children_18_1,
								"com.altran.Optimind.AbstractTask");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getBaseTaskAccess().getChildrenAbstractStatementParserRuleCall_7_0_0_1());
						}
						lv_children_18_2=ruleAbstractStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBaseTaskRule());
							}
							add(
								$current,
								"children",
								lv_children_18_2,
								"com.altran.Optimind.AbstractStatement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getBaseTaskAccess().getChildrenAbstractTaskParserRuleCall_7_1_0_0());
						}
						lv_children_19_1=ruleAbstractTask
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBaseTaskRule());
							}
							add(
								$current,
								"children",
								lv_children_19_1,
								"com.altran.Optimind.AbstractTask");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getBaseTaskAccess().getChildrenAbstractStatementParserRuleCall_7_1_0_1());
						}
						lv_children_19_2=ruleAbstractStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBaseTaskRule());
							}
							add(
								$current,
								"children",
								lv_children_19_2,
								"com.altran.Optimind.AbstractStatement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_20='}'
		{
			newLeafNode(otherlv_20, grammarAccess.getBaseTaskAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleLibraryTask
entryRuleLibraryTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLibraryTaskRule()); }
	iv_ruleLibraryTask=ruleLibraryTask
	{ $current=$iv_ruleLibraryTask.current; }
	EOF;

// Rule LibraryTask
ruleLibraryTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLibraryTaskAccess().getLibraryTaskAction_0(),
					$current);
			}
		)
		otherlv_1='LibraryTask'
		{
			newLeafNode(otherlv_1, grammarAccess.getLibraryTaskAccess().getLibraryTaskKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLibraryTaskAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLibraryTaskRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getLibraryTaskAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='status'
			{
				newLeafNode(otherlv_4, grammarAccess.getLibraryTaskAccess().getStatusKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLibraryTaskAccess().getStatusTaskStatusEnumRuleCall_4_1_0());
					}
					lv_status_5_0=ruleTaskStatus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLibraryTaskRule());
						}
						set(
							$current,
							"status",
							lv_status_5_0,
							"com.altran.Optimind.TaskStatus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLibraryTaskAccess().getInputsTaskInputParserRuleCall_5_0_0());
					}
					lv_inputs_6_0=ruleTaskInput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLibraryTaskRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_6_0,
							"com.altran.Optimind.TaskInput");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLibraryTaskAccess().getInputsTaskInputParserRuleCall_5_1_0());
					}
					lv_inputs_7_0=ruleTaskInput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLibraryTaskRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_7_0,
							"com.altran.Optimind.TaskInput");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLibraryTaskAccess().getOutputsTaskOutputParserRuleCall_6_0_0());
					}
					lv_outputs_8_0=ruleTaskOutput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLibraryTaskRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_8_0,
							"com.altran.Optimind.TaskOutput");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLibraryTaskAccess().getOutputsTaskOutputParserRuleCall_6_1_0());
					}
					lv_outputs_9_0=ruleTaskOutput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLibraryTaskRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_9_0,
							"com.altran.Optimind.TaskOutput");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			otherlv_10='Libraryfunction'
			{
				newLeafNode(otherlv_10, grammarAccess.getLibraryTaskAccess().getLibraryfunctionKeyword_7_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLibraryTaskRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getLibraryTaskAccess().getLibraryfunctionLibraryFunctionCrossReference_7_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getLibraryTaskAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleCustomTask
entryRuleCustomTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCustomTaskRule()); }
	iv_ruleCustomTask=ruleCustomTask
	{ $current=$iv_ruleCustomTask.current; }
	EOF;

// Rule CustomTask
ruleCustomTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCustomTaskAccess().getCustomTaskAction_0(),
					$current);
			}
		)
		otherlv_1='Task'
		{
			newLeafNode(otherlv_1, grammarAccess.getCustomTaskAccess().getTaskKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomTaskAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomTaskRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getCustomTaskAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='status'
			{
				newLeafNode(otherlv_4, grammarAccess.getCustomTaskAccess().getStatusKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCustomTaskAccess().getStatusTaskStatusEnumRuleCall_4_1_0());
					}
					lv_status_5_0=ruleTaskStatus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCustomTaskRule());
						}
						set(
							$current,
							"status",
							lv_status_5_0,
							"com.altran.Optimind.TaskStatus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCustomTaskAccess().getInputsTaskInputParserRuleCall_5_0_0());
					}
					lv_inputs_6_0=ruleTaskInput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCustomTaskRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_6_0,
							"com.altran.Optimind.TaskInput");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCustomTaskAccess().getInputsTaskInputParserRuleCall_5_1_0());
					}
					lv_inputs_7_0=ruleTaskInput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCustomTaskRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_7_0,
							"com.altran.Optimind.TaskInput");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCustomTaskAccess().getOutputsTaskOutputParserRuleCall_6_0_0());
					}
					lv_outputs_8_0=ruleTaskOutput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCustomTaskRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_8_0,
							"com.altran.Optimind.TaskOutput");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCustomTaskAccess().getOutputsTaskOutputParserRuleCall_6_1_0());
					}
					lv_outputs_9_0=ruleTaskOutput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCustomTaskRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_9_0,
							"com.altran.Optimind.TaskOutput");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			otherlv_10='runner'
			{
				newLeafNode(otherlv_10, grammarAccess.getCustomTaskAccess().getRunnerKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCustomTaskAccess().getRunnerEStringParserRuleCall_7_1_0());
					}
					lv_runner_11_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCustomTaskRule());
						}
						set(
							$current,
							"runner",
							lv_runner_11_0,
							"com.altran.Optimind.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getCustomTaskAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleSetter
entryRuleSetter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetterRule()); }
	iv_ruleSetter=ruleSetter
	{ $current=$iv_ruleSetter.current; }
	EOF;

// Rule Setter
ruleSetter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSetterAccess().getSetterAction_0(),
					$current);
			}
		)
		otherlv_1='Setter'
		{
			newLeafNode(otherlv_1, grammarAccess.getSetterAccess().getSetterKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetterAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetterRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='type'
			{
				newLeafNode(otherlv_3, grammarAccess.getSetterAccess().getTypeKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSetterAccess().getTypeAsStringTypeParserRuleCall_3_1_0());
					}
					lv_typeAsString_4_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetterRule());
						}
						set(
							$current,
							"typeAsString",
							lv_typeAsString_4_0,
							"com.altran.Optimind.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='value'
			{
				newLeafNode(otherlv_5, grammarAccess.getSetterAccess().getValueKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSetterAccess().getValueAsStringEStringParserRuleCall_4_1_0());
					}
					lv_valueAsString_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetterRule());
						}
						set(
							$current,
							"valueAsString",
							lv_valueAsString_6_0,
							"com.altran.Optimind.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleConnection
entryRuleConnection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectionRule()); }
	iv_ruleConnection=ruleConnection
	{ $current=$iv_ruleConnection.current; }
	EOF;

// Rule Connection
ruleConnection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConnectionAccess().getConnectionAction_0(),
					$current);
			}
		)
		otherlv_1='Connection'
		{
			newLeafNode(otherlv_1, grammarAccess.getConnectionAccess().getConnectionKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectionAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectionRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='to'
			{
				newLeafNode(otherlv_3, grammarAccess.getConnectionAccess().getToKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConnectionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getConnectionAccess().getTaskoutputTaskOutputCrossReference_3_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLibraryFunction
entryRuleLibraryFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLibraryFunctionRule()); }
	iv_ruleLibraryFunction=ruleLibraryFunction
	{ $current=$iv_ruleLibraryFunction.current; }
	EOF;

// Rule LibraryFunction
ruleLibraryFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLibraryFunctionAccess().getLibraryFunctionAction_0(),
					$current);
			}
		)
		otherlv_1='LibraryFunction'
		{
			newLeafNode(otherlv_1, grammarAccess.getLibraryFunctionAccess().getLibraryFunctionKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLibraryFunctionAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLibraryFunctionRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getLibraryFunctionAccess().getLeftCurlyBracketKeyword_3());
		}
		otherlv_4='function'
		{
			newLeafNode(otherlv_4, grammarAccess.getLibraryFunctionAccess().getFunctionKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLibraryFunctionAccess().getFunctionEStringParserRuleCall_5_0());
				}
				lv_function_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLibraryFunctionRule());
					}
					set(
						$current,
						"function",
						lv_function_5_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLibraryFunctionAccess().getInputsInputParserRuleCall_6_0_0());
					}
					lv_inputs_6_0=ruleInput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLibraryFunctionRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_6_0,
							"com.altran.Optimind.Input");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLibraryFunctionAccess().getInputsInputParserRuleCall_6_1_0());
					}
					lv_inputs_7_0=ruleInput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLibraryFunctionRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_7_0,
							"com.altran.Optimind.Input");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLibraryFunctionAccess().getOutputsOutputParserRuleCall_7_0_0());
					}
					lv_outputs_8_0=ruleOutput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLibraryFunctionRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_8_0,
							"com.altran.Optimind.Output");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLibraryFunctionAccess().getOutputsOutputParserRuleCall_7_1_0());
					}
					lv_outputs_9_0=ruleOutput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLibraryFunctionRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_9_0,
							"com.altran.Optimind.Output");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getLibraryFunctionAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current; }
	EOF;

// Rule Input
ruleInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInputAccess().getInputAction_0(),
					$current);
			}
		)
		otherlv_1='Input'
		{
			newLeafNode(otherlv_1, grammarAccess.getInputAccess().getInputKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInputAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='type'
			{
				newLeafNode(otherlv_3, grammarAccess.getInputAccess().getTypeKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInputAccess().getTypeAsStringTypeParserRuleCall_3_1_0());
					}
					lv_typeAsString_4_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInputRule());
						}
						set(
							$current,
							"typeAsString",
							lv_typeAsString_4_0,
							"com.altran.Optimind.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='value'
			{
				newLeafNode(otherlv_5, grammarAccess.getInputAccess().getValueKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInputAccess().getValueAsStringEStringParserRuleCall_4_1_0());
					}
					lv_valueAsString_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInputRule());
						}
						set(
							$current,
							"valueAsString",
							lv_valueAsString_6_0,
							"com.altran.Optimind.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current; }
	EOF;

// Rule Output
ruleOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOutputAccess().getOutputAction_0(),
					$current);
			}
		)
		otherlv_1='Output'
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getOutputKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.altran.Optimind.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='type'
			{
				newLeafNode(otherlv_3, grammarAccess.getOutputAccess().getTypeKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOutputAccess().getTypeAsStringTypeParserRuleCall_3_1_0());
					}
					lv_typeAsString_4_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOutputRule());
						}
						set(
							$current,
							"typeAsString",
							lv_typeAsString_4_0,
							"com.altran.Optimind.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='value'
			{
				newLeafNode(otherlv_5, grammarAccess.getOutputAccess().getValueKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOutputAccess().getValueAsStringEStringParserRuleCall_4_1_0());
					}
					lv_valueAsString_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOutputRule());
						}
						set(
							$current,
							"valueAsString",
							lv_valueAsString_6_0,
							"com.altran.Optimind.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Rule ProgLanguage
ruleProgLanguage returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Python'
			{
				$current = grammarAccess.getProgLanguageAccess().getPythonEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getProgLanguageAccess().getPythonEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Java'
			{
				$current = grammarAccess.getProgLanguageAccess().getJavaEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getProgLanguageAccess().getJavaEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule TaskStatus
ruleTaskStatus returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='FINISHED'
			{
				$current = grammarAccess.getTaskStatusAccess().getFINISHEDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTaskStatusAccess().getFINISHEDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='PREPARED'
			{
				$current = grammarAccess.getTaskStatusAccess().getPREPAREDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTaskStatusAccess().getPREPAREDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='NOT_PREPARED'
			{
				$current = grammarAccess.getTaskStatusAccess().getNOT_PREPAREDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTaskStatusAccess().getNOT_PREPAREDEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='PROCESSING'
			{
				$current = grammarAccess.getTaskStatusAccess().getPROCESSINGEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTaskStatusAccess().getPROCESSINGEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
