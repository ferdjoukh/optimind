/*
 * generated by Xtext 2.14.0
 */
package com.altran.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OptimindGrammarAccess extends AbstractGrammarElementFinder {
	
	public class WorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.Workflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWorkflowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWorkflowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLanguageKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLanguageAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLanguageProgLanguageEnumRuleCall_4_1_0 = (RuleCall)cLanguageAssignment_4_1.eContents().get(0);
		private final Assignment cBaseTaskAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBaseTaskBaseTaskParserRuleCall_5_0 = (RuleCall)cBaseTaskAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cFunctionsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cFunctionsLibraryFunctionParserRuleCall_6_0_0 = (RuleCall)cFunctionsAssignment_6_0.eContents().get(0);
		private final Assignment cFunctionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFunctionsLibraryFunctionParserRuleCall_6_1_0 = (RuleCall)cFunctionsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Workflow:
		//	{Workflow}
		//	'Workflow'
		//	name=EString
		//	'{' ('Language' language=ProgLanguage)?
		//	baseTask=BaseTask? (functions+=LibraryFunction functions+=LibraryFunction*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Workflow} 'Workflow' name=EString '{' ('Language' language=ProgLanguage)? baseTask=BaseTask?
		//(functions+=LibraryFunction functions+=LibraryFunction*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Workflow}
		public Action getWorkflowAction_0() { return cWorkflowAction_0; }
		
		//'Workflow'
		public Keyword getWorkflowKeyword_1() { return cWorkflowKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('Language' language=ProgLanguage)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'Language'
		public Keyword getLanguageKeyword_4_0() { return cLanguageKeyword_4_0; }
		
		//language=ProgLanguage
		public Assignment getLanguageAssignment_4_1() { return cLanguageAssignment_4_1; }
		
		//ProgLanguage
		public RuleCall getLanguageProgLanguageEnumRuleCall_4_1_0() { return cLanguageProgLanguageEnumRuleCall_4_1_0; }
		
		//baseTask=BaseTask?
		public Assignment getBaseTaskAssignment_5() { return cBaseTaskAssignment_5; }
		
		//BaseTask
		public RuleCall getBaseTaskBaseTaskParserRuleCall_5_0() { return cBaseTaskBaseTaskParserRuleCall_5_0; }
		
		//(functions+=LibraryFunction functions+=LibraryFunction*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//functions+=LibraryFunction
		public Assignment getFunctionsAssignment_6_0() { return cFunctionsAssignment_6_0; }
		
		//LibraryFunction
		public RuleCall getFunctionsLibraryFunctionParserRuleCall_6_0_0() { return cFunctionsLibraryFunctionParserRuleCall_6_0_0; }
		
		//functions+=LibraryFunction*
		public Assignment getFunctionsAssignment_6_1() { return cFunctionsAssignment_6_1; }
		
		//LibraryFunction
		public RuleCall getFunctionsLibraryFunctionParserRuleCall_6_1_0() { return cFunctionsLibraryFunctionParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AbstractTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.AbstractTask");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBaseTaskParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLibraryTaskParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCustomTaskParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractTask:
		//	BaseTask | LibraryTask | CustomTask;
		@Override public ParserRule getRule() { return rule; }
		
		//BaseTask | LibraryTask | CustomTask
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BaseTask
		public RuleCall getBaseTaskParserRuleCall_0() { return cBaseTaskParserRuleCall_0; }
		
		//LibraryTask
		public RuleCall getLibraryTaskParserRuleCall_1() { return cLibraryTaskParserRuleCall_1; }
		
		//CustomTask
		public RuleCall getCustomTaskParserRuleCall_2() { return cCustomTaskParserRuleCall_2; }
	}
	public class TaskInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.TaskInput");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConnectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TaskInput:
		//	Setter | Connection;
		@Override public ParserRule getRule() { return rule; }
		
		//Setter | Connection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Setter
		public RuleCall getSetterParserRuleCall_0() { return cSetterParserRuleCall_0; }
		
		//Connection
		public RuleCall getConnectionParserRuleCall_1() { return cConnectionParserRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EInt ecore::EInt:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class TaskOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.TaskOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTaskOutputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOutputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAsStringAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeAsStringTypeParserRuleCall_3_1_0 = (RuleCall)cTypeAsStringAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAsStringAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueAsStringEStringParserRuleCall_4_1_0 = (RuleCall)cValueAsStringAssignment_4_1.eContents().get(0);
		
		//TaskOutput:
		//	{TaskOutput}
		//	'Output'
		//	name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TaskOutput} 'Output' name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?
		public Group getGroup() { return cGroup; }
		
		//{TaskOutput}
		public Action getTaskOutputAction_0() { return cTaskOutputAction_0; }
		
		//'Output'
		public Keyword getOutputKeyword_1() { return cOutputKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('type' typeAsString=Type)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'type'
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }
		
		//typeAsString=Type
		public Assignment getTypeAsStringAssignment_3_1() { return cTypeAsStringAssignment_3_1; }
		
		//Type
		public RuleCall getTypeAsStringTypeParserRuleCall_3_1_0() { return cTypeAsStringTypeParserRuleCall_3_1_0; }
		
		//('value' valueAsString=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'value'
		public Keyword getValueKeyword_4_0() { return cValueKeyword_4_0; }
		
		//valueAsString=EString
		public Assignment getValueAsStringAssignment_4_1() { return cValueAsStringAssignment_4_1; }
		
		//EString
		public RuleCall getValueAsStringEStringParserRuleCall_4_1_0() { return cValueAsStringEStringParserRuleCall_4_1_0; }
	}
	public class AbstractStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.AbstractStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractStatement:
		//	For | While | If;
		@Override public ParserRule getRule() { return rule; }
		
		//For | While | If
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//For
		public RuleCall getForParserRuleCall_0() { return cForParserRuleCall_0; }
		
		//While
		public RuleCall getWhileParserRuleCall_1() { return cWhileParserRuleCall_1; }
		
		//If
		public RuleCall getIfParserRuleCall_2() { return cIfParserRuleCall_2; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFromAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFromEIntParserRuleCall_5_0 = (RuleCall)cFromAssignment_5.eContents().get(0);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cToAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cToEIntParserRuleCall_7_0 = (RuleCall)cToAssignment_7.eContents().get(0);
		private final Keyword cIncrementKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cIncrementAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cIncrementEIntParserRuleCall_9_0 = (RuleCall)cIncrementAssignment_9.eContents().get(0);
		private final Keyword cDoKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cAbstracttaskAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cAbstracttaskAbstractTaskParserRuleCall_11_0 = (RuleCall)cAbstracttaskAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//For ForStatement:
		//	{ForStatement}
		//	'For'
		//	name=EString
		//	'{'
		//	'from' from=EInt
		//	'to' to=EInt
		//	'increment' increment=EInt
		//	'do' abstracttask=AbstractTask
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ForStatement} 'For' name=EString '{' 'from' from=EInt 'to' to=EInt 'increment' increment=EInt 'do'
		//abstracttask=AbstractTask '}'
		public Group getGroup() { return cGroup; }
		
		//{ForStatement}
		public Action getForStatementAction_0() { return cForStatementAction_0; }
		
		//'For'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'from'
		public Keyword getFromKeyword_4() { return cFromKeyword_4; }
		
		//from=EInt
		public Assignment getFromAssignment_5() { return cFromAssignment_5; }
		
		//EInt
		public RuleCall getFromEIntParserRuleCall_5_0() { return cFromEIntParserRuleCall_5_0; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//to=EInt
		public Assignment getToAssignment_7() { return cToAssignment_7; }
		
		//EInt
		public RuleCall getToEIntParserRuleCall_7_0() { return cToEIntParserRuleCall_7_0; }
		
		//'increment'
		public Keyword getIncrementKeyword_8() { return cIncrementKeyword_8; }
		
		//increment=EInt
		public Assignment getIncrementAssignment_9() { return cIncrementAssignment_9; }
		
		//EInt
		public RuleCall getIncrementEIntParserRuleCall_9_0() { return cIncrementEIntParserRuleCall_9_0; }
		
		//'do'
		public Keyword getDoKeyword_10() { return cDoKeyword_10; }
		
		//abstracttask=AbstractTask
		public Assignment getAbstracttaskAssignment_11() { return cAbstracttaskAssignment_11; }
		
		//AbstractTask
		public RuleCall getAbstracttaskAbstractTaskParserRuleCall_11_0() { return cAbstracttaskAbstractTaskParserRuleCall_11_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cConditionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionEStringParserRuleCall_5_0 = (RuleCall)cConditionAssignment_5.eContents().get(0);
		private final Keyword cDoKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAbstracttaskAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAbstracttaskAbstractTaskParserRuleCall_7_0 = (RuleCall)cAbstracttaskAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//While WhileStatement:
		//	{WhileStatement}
		//	'While'
		//	name=EString
		//	'{'
		//	'condition' condition=EString
		//	'do' abstracttask=AbstractTask
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{WhileStatement} 'While' name=EString '{' 'condition' condition=EString 'do' abstracttask=AbstractTask '}'
		public Group getGroup() { return cGroup; }
		
		//{WhileStatement}
		public Action getWhileStatementAction_0() { return cWhileStatementAction_0; }
		
		//'While'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'condition'
		public Keyword getConditionKeyword_4() { return cConditionKeyword_4; }
		
		//condition=EString
		public Assignment getConditionAssignment_5() { return cConditionAssignment_5; }
		
		//EString
		public RuleCall getConditionEStringParserRuleCall_5_0() { return cConditionEStringParserRuleCall_5_0; }
		
		//'do'
		public Keyword getDoKeyword_6() { return cDoKeyword_6; }
		
		//abstracttask=AbstractTask
		public Assignment getAbstracttaskAssignment_7() { return cAbstracttaskAssignment_7; }
		
		//AbstractTask
		public RuleCall getAbstracttaskAbstractTaskParserRuleCall_7_0() { return cAbstracttaskAbstractTaskParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cConditionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionEStringParserRuleCall_5_0 = (RuleCall)cConditionAssignment_5.eContents().get(0);
		private final Keyword cThenKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cThenAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cThenAbstractTaskParserRuleCall_7_0 = (RuleCall)cThenAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cElseAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cElseAbstractTaskParserRuleCall_8_1_0 = (RuleCall)cElseAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//If IfStatement:
		//	{IfStatement}
		//	'If'
		//	name=EString
		//	'{'
		//	'condition' condition=EString
		//	'then' then=AbstractTask ('else' else=AbstractTask)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{IfStatement} 'If' name=EString '{' 'condition' condition=EString 'then' then=AbstractTask ('else' else=AbstractTask)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{IfStatement}
		public Action getIfStatementAction_0() { return cIfStatementAction_0; }
		
		//'If'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'condition'
		public Keyword getConditionKeyword_4() { return cConditionKeyword_4; }
		
		//condition=EString
		public Assignment getConditionAssignment_5() { return cConditionAssignment_5; }
		
		//EString
		public RuleCall getConditionEStringParserRuleCall_5_0() { return cConditionEStringParserRuleCall_5_0; }
		
		//'then'
		public Keyword getThenKeyword_6() { return cThenKeyword_6; }
		
		//then=AbstractTask
		public Assignment getThenAssignment_7() { return cThenAssignment_7; }
		
		//AbstractTask
		public RuleCall getThenAbstractTaskParserRuleCall_7_0() { return cThenAbstractTaskParserRuleCall_7_0; }
		
		//('else' else=AbstractTask)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'else'
		public Keyword getElseKeyword_8_0() { return cElseKeyword_8_0; }
		
		//else=AbstractTask
		public Assignment getElseAssignment_8_1() { return cElseAssignment_8_1; }
		
		//AbstractTask
		public RuleCall getElseAbstractTaskParserRuleCall_8_1_0() { return cElseAbstractTaskParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class BaseTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.BaseTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBaseTaskAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBaseTaskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStatusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cStatusAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStatusTaskStatusEnumRuleCall_4_1_0 = (RuleCall)cStatusAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInputsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cInputsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cInputsTaskInputParserRuleCall_5_2_0 = (RuleCall)cInputsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cInputsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cInputsTaskInputParserRuleCall_5_3_1_0 = (RuleCall)cInputsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOutputsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cOutputsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cOutputsTaskOutputParserRuleCall_6_2_0 = (RuleCall)cOutputsAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cOutputsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cOutputsTaskOutputParserRuleCall_6_3_1_0 = (RuleCall)cOutputsAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cChildrenAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Alternatives cChildrenAlternatives_7_0_0 = (Alternatives)cChildrenAssignment_7_0.eContents().get(0);
		private final RuleCall cChildrenAbstractTaskParserRuleCall_7_0_0_0 = (RuleCall)cChildrenAlternatives_7_0_0.eContents().get(0);
		private final RuleCall cChildrenAbstractStatementParserRuleCall_7_0_0_1 = (RuleCall)cChildrenAlternatives_7_0_0.eContents().get(1);
		private final Assignment cChildrenAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Alternatives cChildrenAlternatives_7_1_0 = (Alternatives)cChildrenAssignment_7_1.eContents().get(0);
		private final RuleCall cChildrenAbstractTaskParserRuleCall_7_1_0_0 = (RuleCall)cChildrenAlternatives_7_1_0.eContents().get(0);
		private final RuleCall cChildrenAbstractStatementParserRuleCall_7_1_0_1 = (RuleCall)cChildrenAlternatives_7_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BaseTask:
		//	{BaseTask}
		//	'BaseTask'
		//	name=EString
		//	'{' ('status' status=TaskStatus)? ('inputs' '{' inputs+=TaskInput ("," inputs+=TaskInput)* '}')? ('outputs' '{'
		//	outputs+=TaskOutput ("," outputs+=TaskOutput)* '}')? (children+=(AbstractTask | AbstractStatement)
		//	children+=(AbstractTask | AbstractStatement)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BaseTask} 'BaseTask' name=EString '{' ('status' status=TaskStatus)? ('inputs' '{' inputs+=TaskInput (","
		//inputs+=TaskInput)* '}')? ('outputs' '{' outputs+=TaskOutput ("," outputs+=TaskOutput)* '}')? (children+=(AbstractTask
		//| AbstractStatement) children+=(AbstractTask | AbstractStatement)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{BaseTask}
		public Action getBaseTaskAction_0() { return cBaseTaskAction_0; }
		
		//'BaseTask'
		public Keyword getBaseTaskKeyword_1() { return cBaseTaskKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('status' status=TaskStatus)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'status'
		public Keyword getStatusKeyword_4_0() { return cStatusKeyword_4_0; }
		
		//status=TaskStatus
		public Assignment getStatusAssignment_4_1() { return cStatusAssignment_4_1; }
		
		//TaskStatus
		public RuleCall getStatusTaskStatusEnumRuleCall_4_1_0() { return cStatusTaskStatusEnumRuleCall_4_1_0; }
		
		//('inputs' '{' inputs+=TaskInput ("," inputs+=TaskInput)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'inputs'
		public Keyword getInputsKeyword_5_0() { return cInputsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//inputs+=TaskInput
		public Assignment getInputsAssignment_5_2() { return cInputsAssignment_5_2; }
		
		//TaskInput
		public RuleCall getInputsTaskInputParserRuleCall_5_2_0() { return cInputsTaskInputParserRuleCall_5_2_0; }
		
		//("," inputs+=TaskInput)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//inputs+=TaskInput
		public Assignment getInputsAssignment_5_3_1() { return cInputsAssignment_5_3_1; }
		
		//TaskInput
		public RuleCall getInputsTaskInputParserRuleCall_5_3_1_0() { return cInputsTaskInputParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//('outputs' '{' outputs+=TaskOutput ("," outputs+=TaskOutput)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'outputs'
		public Keyword getOutputsKeyword_6_0() { return cOutputsKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//outputs+=TaskOutput
		public Assignment getOutputsAssignment_6_2() { return cOutputsAssignment_6_2; }
		
		//TaskOutput
		public RuleCall getOutputsTaskOutputParserRuleCall_6_2_0() { return cOutputsTaskOutputParserRuleCall_6_2_0; }
		
		//("," outputs+=TaskOutput)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//outputs+=TaskOutput
		public Assignment getOutputsAssignment_6_3_1() { return cOutputsAssignment_6_3_1; }
		
		//TaskOutput
		public RuleCall getOutputsTaskOutputParserRuleCall_6_3_1_0() { return cOutputsTaskOutputParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//(children+=(AbstractTask | AbstractStatement) children+=(AbstractTask | AbstractStatement)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//children+=(AbstractTask | AbstractStatement)
		public Assignment getChildrenAssignment_7_0() { return cChildrenAssignment_7_0; }
		
		//(AbstractTask | AbstractStatement)
		public Alternatives getChildrenAlternatives_7_0_0() { return cChildrenAlternatives_7_0_0; }
		
		//AbstractTask
		public RuleCall getChildrenAbstractTaskParserRuleCall_7_0_0_0() { return cChildrenAbstractTaskParserRuleCall_7_0_0_0; }
		
		//AbstractStatement
		public RuleCall getChildrenAbstractStatementParserRuleCall_7_0_0_1() { return cChildrenAbstractStatementParserRuleCall_7_0_0_1; }
		
		//children+=(AbstractTask | AbstractStatement)*
		public Assignment getChildrenAssignment_7_1() { return cChildrenAssignment_7_1; }
		
		//(AbstractTask | AbstractStatement)
		public Alternatives getChildrenAlternatives_7_1_0() { return cChildrenAlternatives_7_1_0; }
		
		//AbstractTask
		public RuleCall getChildrenAbstractTaskParserRuleCall_7_1_0_0() { return cChildrenAbstractTaskParserRuleCall_7_1_0_0; }
		
		//AbstractStatement
		public RuleCall getChildrenAbstractStatementParserRuleCall_7_1_0_1() { return cChildrenAbstractStatementParserRuleCall_7_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class LibraryTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.LibraryTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLibraryTaskAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLibraryTaskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStatusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cStatusAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStatusTaskStatusEnumRuleCall_4_1_0 = (RuleCall)cStatusAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cInputsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cInputsTaskInputParserRuleCall_5_0_0 = (RuleCall)cInputsAssignment_5_0.eContents().get(0);
		private final Assignment cInputsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInputsTaskInputParserRuleCall_5_1_0 = (RuleCall)cInputsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cOutputsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cOutputsTaskOutputParserRuleCall_6_0_0 = (RuleCall)cOutputsAssignment_6_0.eContents().get(0);
		private final Assignment cOutputsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOutputsTaskOutputParserRuleCall_6_1_0 = (RuleCall)cOutputsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLibraryfunctionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cLibraryfunctionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cLibraryfunctionLibraryFunctionCrossReference_7_1_0 = (CrossReference)cLibraryfunctionAssignment_7_1.eContents().get(0);
		private final RuleCall cLibraryfunctionLibraryFunctionEStringParserRuleCall_7_1_0_1 = (RuleCall)cLibraryfunctionLibraryFunctionCrossReference_7_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//LibraryTask:
		//	{LibraryTask}
		//	'LibraryTask'
		//	name=EString
		//	'{' ('status' status=TaskStatus)? (inputs+=TaskInput inputs+=TaskInput*)? (outputs+=TaskOutput outputs+=TaskOutput*)?
		//	('Libraryfunction' libraryfunction=[LibraryFunction|EString])?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{LibraryTask} 'LibraryTask' name=EString '{' ('status' status=TaskStatus)? (inputs+=TaskInput inputs+=TaskInput*)?
		//(outputs+=TaskOutput outputs+=TaskOutput*)? ('Libraryfunction' libraryfunction=[LibraryFunction|EString])? '}'
		public Group getGroup() { return cGroup; }
		
		//{LibraryTask}
		public Action getLibraryTaskAction_0() { return cLibraryTaskAction_0; }
		
		//'LibraryTask'
		public Keyword getLibraryTaskKeyword_1() { return cLibraryTaskKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('status' status=TaskStatus)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'status'
		public Keyword getStatusKeyword_4_0() { return cStatusKeyword_4_0; }
		
		//status=TaskStatus
		public Assignment getStatusAssignment_4_1() { return cStatusAssignment_4_1; }
		
		//TaskStatus
		public RuleCall getStatusTaskStatusEnumRuleCall_4_1_0() { return cStatusTaskStatusEnumRuleCall_4_1_0; }
		
		//(inputs+=TaskInput inputs+=TaskInput*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//inputs+=TaskInput
		public Assignment getInputsAssignment_5_0() { return cInputsAssignment_5_0; }
		
		//TaskInput
		public RuleCall getInputsTaskInputParserRuleCall_5_0_0() { return cInputsTaskInputParserRuleCall_5_0_0; }
		
		//inputs+=TaskInput*
		public Assignment getInputsAssignment_5_1() { return cInputsAssignment_5_1; }
		
		//TaskInput
		public RuleCall getInputsTaskInputParserRuleCall_5_1_0() { return cInputsTaskInputParserRuleCall_5_1_0; }
		
		//(outputs+=TaskOutput outputs+=TaskOutput*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//outputs+=TaskOutput
		public Assignment getOutputsAssignment_6_0() { return cOutputsAssignment_6_0; }
		
		//TaskOutput
		public RuleCall getOutputsTaskOutputParserRuleCall_6_0_0() { return cOutputsTaskOutputParserRuleCall_6_0_0; }
		
		//outputs+=TaskOutput*
		public Assignment getOutputsAssignment_6_1() { return cOutputsAssignment_6_1; }
		
		//TaskOutput
		public RuleCall getOutputsTaskOutputParserRuleCall_6_1_0() { return cOutputsTaskOutputParserRuleCall_6_1_0; }
		
		//('Libraryfunction' libraryfunction=[LibraryFunction|EString])?
		public Group getGroup_7() { return cGroup_7; }
		
		//'Libraryfunction'
		public Keyword getLibraryfunctionKeyword_7_0() { return cLibraryfunctionKeyword_7_0; }
		
		//libraryfunction=[LibraryFunction|EString]
		public Assignment getLibraryfunctionAssignment_7_1() { return cLibraryfunctionAssignment_7_1; }
		
		//[LibraryFunction|EString]
		public CrossReference getLibraryfunctionLibraryFunctionCrossReference_7_1_0() { return cLibraryfunctionLibraryFunctionCrossReference_7_1_0; }
		
		//EString
		public RuleCall getLibraryfunctionLibraryFunctionEStringParserRuleCall_7_1_0_1() { return cLibraryfunctionLibraryFunctionEStringParserRuleCall_7_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class CustomTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.CustomTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCustomTaskAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTaskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStatusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cStatusAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStatusTaskStatusEnumRuleCall_4_1_0 = (RuleCall)cStatusAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cInputsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cInputsTaskInputParserRuleCall_5_0_0 = (RuleCall)cInputsAssignment_5_0.eContents().get(0);
		private final Assignment cInputsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInputsTaskInputParserRuleCall_5_1_0 = (RuleCall)cInputsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cOutputsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cOutputsTaskOutputParserRuleCall_6_0_0 = (RuleCall)cOutputsAssignment_6_0.eContents().get(0);
		private final Assignment cOutputsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cOutputsTaskOutputParserRuleCall_6_1_0 = (RuleCall)cOutputsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cRunnerKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cRunnerAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cRunnerEStringParserRuleCall_7_1_0 = (RuleCall)cRunnerAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//CustomTask:
		//	{CustomTask}
		//	'Task'
		//	name=EString
		//	'{' ('status' status=TaskStatus)? (inputs+=TaskInput inputs+=TaskInput*)? (outputs+=TaskOutput outputs+=TaskOutput*)?
		//	('runner' runner=EString)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{CustomTask} 'Task' name=EString '{' ('status' status=TaskStatus)? (inputs+=TaskInput inputs+=TaskInput*)?
		//(outputs+=TaskOutput outputs+=TaskOutput*)? ('runner' runner=EString)? '}'
		public Group getGroup() { return cGroup; }
		
		//{CustomTask}
		public Action getCustomTaskAction_0() { return cCustomTaskAction_0; }
		
		//'Task'
		public Keyword getTaskKeyword_1() { return cTaskKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('status' status=TaskStatus)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'status'
		public Keyword getStatusKeyword_4_0() { return cStatusKeyword_4_0; }
		
		//status=TaskStatus
		public Assignment getStatusAssignment_4_1() { return cStatusAssignment_4_1; }
		
		//TaskStatus
		public RuleCall getStatusTaskStatusEnumRuleCall_4_1_0() { return cStatusTaskStatusEnumRuleCall_4_1_0; }
		
		//(inputs+=TaskInput inputs+=TaskInput*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//inputs+=TaskInput
		public Assignment getInputsAssignment_5_0() { return cInputsAssignment_5_0; }
		
		//TaskInput
		public RuleCall getInputsTaskInputParserRuleCall_5_0_0() { return cInputsTaskInputParserRuleCall_5_0_0; }
		
		//inputs+=TaskInput*
		public Assignment getInputsAssignment_5_1() { return cInputsAssignment_5_1; }
		
		//TaskInput
		public RuleCall getInputsTaskInputParserRuleCall_5_1_0() { return cInputsTaskInputParserRuleCall_5_1_0; }
		
		//(outputs+=TaskOutput outputs+=TaskOutput*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//outputs+=TaskOutput
		public Assignment getOutputsAssignment_6_0() { return cOutputsAssignment_6_0; }
		
		//TaskOutput
		public RuleCall getOutputsTaskOutputParserRuleCall_6_0_0() { return cOutputsTaskOutputParserRuleCall_6_0_0; }
		
		//outputs+=TaskOutput*
		public Assignment getOutputsAssignment_6_1() { return cOutputsAssignment_6_1; }
		
		//TaskOutput
		public RuleCall getOutputsTaskOutputParserRuleCall_6_1_0() { return cOutputsTaskOutputParserRuleCall_6_1_0; }
		
		//('runner' runner=EString)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'runner'
		public Keyword getRunnerKeyword_7_0() { return cRunnerKeyword_7_0; }
		
		//runner=EString
		public Assignment getRunnerAssignment_7_1() { return cRunnerAssignment_7_1; }
		
		//EString
		public RuleCall getRunnerEStringParserRuleCall_7_1_0() { return cRunnerEStringParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class SetterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.Setter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAsStringAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeAsStringTypeParserRuleCall_3_1_0 = (RuleCall)cTypeAsStringAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAsStringAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueAsStringEStringParserRuleCall_4_1_0 = (RuleCall)cValueAsStringAssignment_4_1.eContents().get(0);
		
		//Setter:
		//	{Setter}
		//	'Setter'
		//	name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Setter} 'Setter' name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?
		public Group getGroup() { return cGroup; }
		
		//{Setter}
		public Action getSetterAction_0() { return cSetterAction_0; }
		
		//'Setter'
		public Keyword getSetterKeyword_1() { return cSetterKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('type' typeAsString=Type)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'type'
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }
		
		//typeAsString=Type
		public Assignment getTypeAsStringAssignment_3_1() { return cTypeAsStringAssignment_3_1; }
		
		//Type
		public RuleCall getTypeAsStringTypeParserRuleCall_3_1_0() { return cTypeAsStringTypeParserRuleCall_3_1_0; }
		
		//('value' valueAsString=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'value'
		public Keyword getValueKeyword_4_0() { return cValueKeyword_4_0; }
		
		//valueAsString=EString
		public Assignment getValueAsStringAssignment_4_1() { return cValueAsStringAssignment_4_1; }
		
		//EString
		public RuleCall getValueAsStringEStringParserRuleCall_4_1_0() { return cValueAsStringEStringParserRuleCall_4_1_0; }
	}
	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.Connection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConnectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConnectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cToKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTaskoutputAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTaskoutputTaskOutputCrossReference_3_1_0 = (CrossReference)cTaskoutputAssignment_3_1.eContents().get(0);
		private final RuleCall cTaskoutputTaskOutputEStringParserRuleCall_3_1_0_1 = (RuleCall)cTaskoutputTaskOutputCrossReference_3_1_0.eContents().get(1);
		
		//Connection:
		//	{Connection}
		//	'Connection'
		//	name=EString ('to' taskoutput=[TaskOutput|EString])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Connection} 'Connection' name=EString ('to' taskoutput=[TaskOutput|EString])?
		public Group getGroup() { return cGroup; }
		
		//{Connection}
		public Action getConnectionAction_0() { return cConnectionAction_0; }
		
		//'Connection'
		public Keyword getConnectionKeyword_1() { return cConnectionKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('to' taskoutput=[TaskOutput|EString])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'to'
		public Keyword getToKeyword_3_0() { return cToKeyword_3_0; }
		
		//taskoutput=[TaskOutput|EString]
		public Assignment getTaskoutputAssignment_3_1() { return cTaskoutputAssignment_3_1; }
		
		//[TaskOutput|EString]
		public CrossReference getTaskoutputTaskOutputCrossReference_3_1_0() { return cTaskoutputTaskOutputCrossReference_3_1_0; }
		
		//EString
		public RuleCall getTaskoutputTaskOutputEStringParserRuleCall_3_1_0_1() { return cTaskoutputTaskOutputEStringParserRuleCall_3_1_0_1; }
	}
	public class LibraryFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.LibraryFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLibraryFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLibraryFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFunctionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFunctionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionEStringParserRuleCall_5_0 = (RuleCall)cFunctionAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cInputsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cInputsInputParserRuleCall_6_0_0 = (RuleCall)cInputsAssignment_6_0.eContents().get(0);
		private final Assignment cInputsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInputsInputParserRuleCall_6_1_0 = (RuleCall)cInputsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cOutputsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cOutputsOutputParserRuleCall_7_0_0 = (RuleCall)cOutputsAssignment_7_0.eContents().get(0);
		private final Assignment cOutputsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOutputsOutputParserRuleCall_7_1_0 = (RuleCall)cOutputsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//LibraryFunction:
		//	{LibraryFunction}
		//	'LibraryFunction'
		//	name=EString
		//	'{'
		//	'function' function=EString (inputs+=Input inputs+=Input*)? (outputs+=Output outputs+=Output*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{LibraryFunction} 'LibraryFunction' name=EString '{' 'function' function=EString (inputs+=Input inputs+=Input*)?
		//(outputs+=Output outputs+=Output*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{LibraryFunction}
		public Action getLibraryFunctionAction_0() { return cLibraryFunctionAction_0; }
		
		//'LibraryFunction'
		public Keyword getLibraryFunctionKeyword_1() { return cLibraryFunctionKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'function'
		public Keyword getFunctionKeyword_4() { return cFunctionKeyword_4; }
		
		//function=EString
		public Assignment getFunctionAssignment_5() { return cFunctionAssignment_5; }
		
		//EString
		public RuleCall getFunctionEStringParserRuleCall_5_0() { return cFunctionEStringParserRuleCall_5_0; }
		
		//(inputs+=Input inputs+=Input*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//inputs+=Input
		public Assignment getInputsAssignment_6_0() { return cInputsAssignment_6_0; }
		
		//Input
		public RuleCall getInputsInputParserRuleCall_6_0_0() { return cInputsInputParserRuleCall_6_0_0; }
		
		//inputs+=Input*
		public Assignment getInputsAssignment_6_1() { return cInputsAssignment_6_1; }
		
		//Input
		public RuleCall getInputsInputParserRuleCall_6_1_0() { return cInputsInputParserRuleCall_6_1_0; }
		
		//(outputs+=Output outputs+=Output*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//outputs+=Output
		public Assignment getOutputsAssignment_7_0() { return cOutputsAssignment_7_0; }
		
		//Output
		public RuleCall getOutputsOutputParserRuleCall_7_0_0() { return cOutputsOutputParserRuleCall_7_0_0; }
		
		//outputs+=Output*
		public Assignment getOutputsAssignment_7_1() { return cOutputsAssignment_7_1; }
		
		//Output
		public RuleCall getOutputsOutputParserRuleCall_7_1_0() { return cOutputsOutputParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAsStringAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeAsStringTypeParserRuleCall_3_1_0 = (RuleCall)cTypeAsStringAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAsStringAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueAsStringEStringParserRuleCall_4_1_0 = (RuleCall)cValueAsStringAssignment_4_1.eContents().get(0);
		
		//Input:
		//	{Input}
		//	'Input'
		//	name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Input} 'Input' name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?
		public Group getGroup() { return cGroup; }
		
		//{Input}
		public Action getInputAction_0() { return cInputAction_0; }
		
		//'Input'
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('type' typeAsString=Type)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'type'
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }
		
		//typeAsString=Type
		public Assignment getTypeAsStringAssignment_3_1() { return cTypeAsStringAssignment_3_1; }
		
		//Type
		public RuleCall getTypeAsStringTypeParserRuleCall_3_1_0() { return cTypeAsStringTypeParserRuleCall_3_1_0; }
		
		//('value' valueAsString=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'value'
		public Keyword getValueKeyword_4_0() { return cValueKeyword_4_0; }
		
		//valueAsString=EString
		public Assignment getValueAsStringAssignment_4_1() { return cValueAsStringAssignment_4_1; }
		
		//EString
		public RuleCall getValueAsStringEStringParserRuleCall_4_1_0() { return cValueAsStringEStringParserRuleCall_4_1_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOutputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAsStringAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeAsStringTypeParserRuleCall_3_1_0 = (RuleCall)cTypeAsStringAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAsStringAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueAsStringEStringParserRuleCall_4_1_0 = (RuleCall)cValueAsStringAssignment_4_1.eContents().get(0);
		
		//Output:
		//	{Output}
		//	'Output'
		//	name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Output} 'Output' name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?
		public Group getGroup() { return cGroup; }
		
		//{Output}
		public Action getOutputAction_0() { return cOutputAction_0; }
		
		//'Output'
		public Keyword getOutputKeyword_1() { return cOutputKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('type' typeAsString=Type)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'type'
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }
		
		//typeAsString=Type
		public Assignment getTypeAsStringAssignment_3_1() { return cTypeAsStringAssignment_3_1; }
		
		//Type
		public RuleCall getTypeAsStringTypeParserRuleCall_3_1_0() { return cTypeAsStringTypeParserRuleCall_3_1_0; }
		
		//('value' valueAsString=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'value'
		public Keyword getValueKeyword_4_0() { return cValueKeyword_4_0; }
		
		//valueAsString=EString
		public Assignment getValueAsStringAssignment_4_1() { return cValueAsStringAssignment_4_1; }
		
		//EString
		public RuleCall getValueAsStringEStringParserRuleCall_4_1_0() { return cValueAsStringEStringParserRuleCall_4_1_0; }
	}
	
	public class ProgLanguageElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.ProgLanguage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPythonEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPythonPythonKeyword_0_0 = (Keyword)cPythonEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cJavaEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cJavaJavaKeyword_1_0 = (Keyword)cJavaEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ProgLanguage returns Language:
		//	Python | Java;
		public EnumRule getRule() { return rule; }
		
		//Python | Java
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Python
		public EnumLiteralDeclaration getPythonEnumLiteralDeclaration_0() { return cPythonEnumLiteralDeclaration_0; }
		
		//'Python'
		public Keyword getPythonPythonKeyword_0_0() { return cPythonPythonKeyword_0_0; }
		
		//Java
		public EnumLiteralDeclaration getJavaEnumLiteralDeclaration_1() { return cJavaEnumLiteralDeclaration_1; }
		
		//'Java'
		public Keyword getJavaJavaKeyword_1_0() { return cJavaJavaKeyword_1_0; }
	}
	public class TaskStatusElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.altran.Optimind.TaskStatus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFINISHEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFINISHEDFINISHEDKeyword_0_0 = (Keyword)cFINISHEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPREPAREDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPREPAREDPREPAREDKeyword_1_0 = (Keyword)cPREPAREDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_PREPAREDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNOT_PREPAREDNOT_PREPAREDKeyword_2_0 = (Keyword)cNOT_PREPAREDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPROCESSINGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPROCESSINGPROCESSINGKeyword_3_0 = (Keyword)cPROCESSINGEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TaskStatus:
		//	FINISHED | PREPARED | NOT_PREPARED | PROCESSING;
		public EnumRule getRule() { return rule; }
		
		//FINISHED | PREPARED | NOT_PREPARED | PROCESSING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FINISHED
		public EnumLiteralDeclaration getFINISHEDEnumLiteralDeclaration_0() { return cFINISHEDEnumLiteralDeclaration_0; }
		
		//'FINISHED'
		public Keyword getFINISHEDFINISHEDKeyword_0_0() { return cFINISHEDFINISHEDKeyword_0_0; }
		
		//PREPARED
		public EnumLiteralDeclaration getPREPAREDEnumLiteralDeclaration_1() { return cPREPAREDEnumLiteralDeclaration_1; }
		
		//'PREPARED'
		public Keyword getPREPAREDPREPAREDKeyword_1_0() { return cPREPAREDPREPAREDKeyword_1_0; }
		
		//NOT_PREPARED
		public EnumLiteralDeclaration getNOT_PREPAREDEnumLiteralDeclaration_2() { return cNOT_PREPAREDEnumLiteralDeclaration_2; }
		
		//'NOT_PREPARED'
		public Keyword getNOT_PREPAREDNOT_PREPAREDKeyword_2_0() { return cNOT_PREPAREDNOT_PREPAREDKeyword_2_0; }
		
		//PROCESSING
		public EnumLiteralDeclaration getPROCESSINGEnumLiteralDeclaration_3() { return cPROCESSINGEnumLiteralDeclaration_3; }
		
		//'PROCESSING'
		public Keyword getPROCESSINGPROCESSINGKeyword_3_0() { return cPROCESSINGPROCESSINGKeyword_3_0; }
	}
	
	private final WorkflowElements pWorkflow;
	private final AbstractTaskElements pAbstractTask;
	private final TaskInputElements pTaskInput;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final TypeElements pType;
	private final TaskOutputElements pTaskOutput;
	private final AbstractStatementElements pAbstractStatement;
	private final ForElements pFor;
	private final WhileElements pWhile;
	private final IfElements pIf;
	private final ProgLanguageElements eProgLanguage;
	private final TaskStatusElements eTaskStatus;
	private final BaseTaskElements pBaseTask;
	private final LibraryTaskElements pLibraryTask;
	private final CustomTaskElements pCustomTask;
	private final SetterElements pSetter;
	private final ConnectionElements pConnection;
	private final LibraryFunctionElements pLibraryFunction;
	private final InputElements pInput;
	private final OutputElements pOutput;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OptimindGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWorkflow = new WorkflowElements();
		this.pAbstractTask = new AbstractTaskElements();
		this.pTaskInput = new TaskInputElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pType = new TypeElements();
		this.pTaskOutput = new TaskOutputElements();
		this.pAbstractStatement = new AbstractStatementElements();
		this.pFor = new ForElements();
		this.pWhile = new WhileElements();
		this.pIf = new IfElements();
		this.eProgLanguage = new ProgLanguageElements();
		this.eTaskStatus = new TaskStatusElements();
		this.pBaseTask = new BaseTaskElements();
		this.pLibraryTask = new LibraryTaskElements();
		this.pCustomTask = new CustomTaskElements();
		this.pSetter = new SetterElements();
		this.pConnection = new ConnectionElements();
		this.pLibraryFunction = new LibraryFunctionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.altran.Optimind".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Workflow:
	//	{Workflow}
	//	'Workflow'
	//	name=EString
	//	'{' ('Language' language=ProgLanguage)?
	//	baseTask=BaseTask? (functions+=LibraryFunction functions+=LibraryFunction*)?
	//	'}';
	public WorkflowElements getWorkflowAccess() {
		return pWorkflow;
	}
	
	public ParserRule getWorkflowRule() {
		return getWorkflowAccess().getRule();
	}
	
	//AbstractTask:
	//	BaseTask | LibraryTask | CustomTask;
	public AbstractTaskElements getAbstractTaskAccess() {
		return pAbstractTask;
	}
	
	public ParserRule getAbstractTaskRule() {
		return getAbstractTaskAccess().getRule();
	}
	
	//TaskInput:
	//	Setter | Connection;
	public TaskInputElements getTaskInputAccess() {
		return pTaskInput;
	}
	
	public ParserRule getTaskInputRule() {
		return getTaskInputAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Type:
	//	STRING | ID;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TaskOutput:
	//	{TaskOutput}
	//	'Output'
	//	name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?;
	public TaskOutputElements getTaskOutputAccess() {
		return pTaskOutput;
	}
	
	public ParserRule getTaskOutputRule() {
		return getTaskOutputAccess().getRule();
	}
	
	//AbstractStatement:
	//	For | While | If;
	public AbstractStatementElements getAbstractStatementAccess() {
		return pAbstractStatement;
	}
	
	public ParserRule getAbstractStatementRule() {
		return getAbstractStatementAccess().getRule();
	}
	
	//For ForStatement:
	//	{ForStatement}
	//	'For'
	//	name=EString
	//	'{'
	//	'from' from=EInt
	//	'to' to=EInt
	//	'increment' increment=EInt
	//	'do' abstracttask=AbstractTask
	//	'}';
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//While WhileStatement:
	//	{WhileStatement}
	//	'While'
	//	name=EString
	//	'{'
	//	'condition' condition=EString
	//	'do' abstracttask=AbstractTask
	//	'}';
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//If IfStatement:
	//	{IfStatement}
	//	'If'
	//	name=EString
	//	'{'
	//	'condition' condition=EString
	//	'then' then=AbstractTask ('else' else=AbstractTask)?
	//	'}';
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//enum ProgLanguage returns Language:
	//	Python | Java;
	public ProgLanguageElements getProgLanguageAccess() {
		return eProgLanguage;
	}
	
	public EnumRule getProgLanguageRule() {
		return getProgLanguageAccess().getRule();
	}
	
	//enum TaskStatus:
	//	FINISHED | PREPARED | NOT_PREPARED | PROCESSING;
	public TaskStatusElements getTaskStatusAccess() {
		return eTaskStatus;
	}
	
	public EnumRule getTaskStatusRule() {
		return getTaskStatusAccess().getRule();
	}
	
	//BaseTask:
	//	{BaseTask}
	//	'BaseTask'
	//	name=EString
	//	'{' ('status' status=TaskStatus)? ('inputs' '{' inputs+=TaskInput ("," inputs+=TaskInput)* '}')? ('outputs' '{'
	//	outputs+=TaskOutput ("," outputs+=TaskOutput)* '}')? (children+=(AbstractTask | AbstractStatement)
	//	children+=(AbstractTask | AbstractStatement)*)?
	//	'}';
	public BaseTaskElements getBaseTaskAccess() {
		return pBaseTask;
	}
	
	public ParserRule getBaseTaskRule() {
		return getBaseTaskAccess().getRule();
	}
	
	//LibraryTask:
	//	{LibraryTask}
	//	'LibraryTask'
	//	name=EString
	//	'{' ('status' status=TaskStatus)? (inputs+=TaskInput inputs+=TaskInput*)? (outputs+=TaskOutput outputs+=TaskOutput*)?
	//	('Libraryfunction' libraryfunction=[LibraryFunction|EString])?
	//	'}';
	public LibraryTaskElements getLibraryTaskAccess() {
		return pLibraryTask;
	}
	
	public ParserRule getLibraryTaskRule() {
		return getLibraryTaskAccess().getRule();
	}
	
	//CustomTask:
	//	{CustomTask}
	//	'Task'
	//	name=EString
	//	'{' ('status' status=TaskStatus)? (inputs+=TaskInput inputs+=TaskInput*)? (outputs+=TaskOutput outputs+=TaskOutput*)?
	//	('runner' runner=EString)?
	//	'}';
	public CustomTaskElements getCustomTaskAccess() {
		return pCustomTask;
	}
	
	public ParserRule getCustomTaskRule() {
		return getCustomTaskAccess().getRule();
	}
	
	//Setter:
	//	{Setter}
	//	'Setter'
	//	name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?;
	public SetterElements getSetterAccess() {
		return pSetter;
	}
	
	public ParserRule getSetterRule() {
		return getSetterAccess().getRule();
	}
	
	//Connection:
	//	{Connection}
	//	'Connection'
	//	name=EString ('to' taskoutput=[TaskOutput|EString])?;
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}
	
	//LibraryFunction:
	//	{LibraryFunction}
	//	'LibraryFunction'
	//	name=EString
	//	'{'
	//	'function' function=EString (inputs+=Input inputs+=Input*)? (outputs+=Output outputs+=Output*)?
	//	'}';
	public LibraryFunctionElements getLibraryFunctionAccess() {
		return pLibraryFunction;
	}
	
	public ParserRule getLibraryFunctionRule() {
		return getLibraryFunctionAccess().getRule();
	}
	
	//Input:
	//	{Input}
	//	'Input'
	//	name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	{Output}
	//	'Output'
	//	name=EString ('type' typeAsString=Type)? ('value' valueAsString=EString)?;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
